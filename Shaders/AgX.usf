// AgX by Troy Sobotka
// https://github.com/sobotka/AgX
//
// Implementation adapted from
// https://iolite-engine.com/blog_posts/minimal_agx_implementation

#pragma once

float3 AgxDefaultContrastApprox(float3 x) 
{
	const float3 x2 = x * x;
	const float3 x4 = x2 * x2;
    const float3 x6 = x4 * x2;

    return -17.86 * x6 * x
         + 78.01 * x6
         - 126.7 * x4 * x
         + 92.06 * x4
         - 28.72 * x2 * x
         + 4.361 * x2
         - 0.1718 * x
         + 0.002857;
}

float3 Agx(float3 val) 
{
	const float3x3 agx_mat = float3x3(
		0.842479062253094, 0.0423282422610123, 0.0423756549057051,
		0.0784335999999992,  0.878468636469772,  0.0784336,
		0.0792237451477643, 0.0791661274605434, 0.879142973793104);

	const float min_ev = -12.47393f;
	const float max_ev = 4.026069f;
	
	// Input transform (inset)
	val = mul(agx_mat, val);

	// Log2 space encoding
	val = clamp(log2(val), min_ev, max_ev);
	val = (val - min_ev) / (max_ev - min_ev);
  
	// Apply sigmoid function approximation
	val = AgxDefaultContrastApprox(val);

	return val;
}

float3 AgxLook(float3 val)
{
    const float3 lw = float3(0.2126, 0.7152, 0.0722);
    float luma = dot(val, lw);
  
  // Default
    float3 offset = float3(0.0, 0.0, 0.0);
    float3 slope = float3(1.0, 1.0, 1.0);
    float3 power = float3(1.0, 1.0, 1.0);

	float sat = 1.0;

#if TONEMAP_OPERATOR == TONEMAP_AGXPUNCHY
  // Punchy
    slope = float3(1.0, 1.0, 1.0);
    power = float3(1.35, 1.35, 1.35);
	sat = 1.4;
#endif
  
  // ASC CDL
    val = pow(val * slope + offset, power);
    return luma + sat * (val - luma);
}


float3 AgxEotf(float3 val) 
{
	const float3x3 agx_mat_inv = float3x3(
		1.19687900512017, -0.0528968517574562, -0.0529716355144438,
		-0.0980208811401368, 1.15190312990417, -0.0980434501171241,
		-0.0990297440797205, -0.0989611768448433, 1.15107367264116);
	
	// Inverse input transform (outset)
  	val = mul(agx_mat_inv, val);

	// sRGB IEC 61966-2-1 2.2 Exponent Reference EOTF Display
	// NOTE: We're linearizing the output here. Comment/adjust when
	// *not* using a sRGB render target

	val = pow(val, 2.2);

	return val;
}
