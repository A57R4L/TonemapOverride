// Copyright 2024 Ossi Luoto
// 
// Common parameters and functions for custom tonemapper
// If using engine/ACES also, most of these are defined in the PostProcessCombineLUTs.usf

#pragma once

/*
// Engine default = 32, size of one dimension in the 3D LUT
float LUTSize;

// Tonemapping parameters
half3 ColorScale;
half4 OverlayColor;

float4 ColorSaturation;
float4 ColorContrast;
float4 ColorGamma;
float4 ColorGain;
float4 ColorOffset;

float4 ColorSaturationShadows;
float4 ColorContrastShadows;
float4 ColorGammaShadows;
float4 ColorGainShadows;
float4 ColorOffsetShadows;

float4 ColorSaturationMidtones;
float4 ColorContrastMidtones;
float4 ColorGammaMidtones;
float4 ColorGainMidtones;
float4 ColorOffsetMidtones;

float4 ColorSaturationHighlights;
float4 ColorContrastHighlights;
float4 ColorGammaHighlights;
float4 ColorGainHighlights;
float4 ColorOffsetHighlights;

float  ColorCorrectionShadowsMax;
float  ColorCorrectionHighlightsMin;
float  ColorCorrectionHighlightsMax;

uint bIsTemperatureWhiteBalance;
float WhiteTemp;
float WhiteTint;

// From PostProcessCombineLUTs.usf
uint OutputDevice;
uint OutputGamut;
float OutputMaxLuminance;

float4 ACESMinMaxData;
float4 ACESMidData;
float4 ACESCoefsLow_0;
float4 ACESCoefsHigh_0;
float ACESCoefsLow_4;
float ACESCoefsHigh_4;
float ACESSceneColorMultiplier;
float ACESGamutCompression;

float BlueCorrection;
float ExpandGamut;
float ToneCurveAmount;

uint GetOutputDevice()
{
#if OUTPUT_DEVICE_SRGB
	return TONEMAPPER_OUTPUT_sRGB;
#else
	return OutputDevice;
#endif
}
*/

// LUT Texture for Sampling (Tony)

Texture3D LUTTexture;
SamplerState LUTTextureSampler;

// First create linear RGB "cube" in engine style

float4 CreateNeutralLUT(float2 InUV, uint InLayerIndex)
{
    float4 Neutral;
#if USE_VOLUME_LUT == 1
	{
		float2 UV = InUV - float2(0.5f / LUTSize, 0.5f / LUTSize);
		Neutral = float4(UV * LUTSize / (LUTSize - 1), InLayerIndex / (LUTSize - 1), 0);
	}
#else
	{ 
        float2 UV = InUV;
        UV -= float2(0.49999f / (LUTSize * LUTSize), 0.49999f / LUTSize);
        float Scale = LUTSize / (LUTSize - 1);

        float3 RGB;
        RGB.r = frac(UV.x * LUTSize);
        RGB.b = UV.x - RGB.r / LUTSize;
        RGB.g = UV.y;
        Neutral = float4(RGB * Scale, 0);
    }
#endif	
    return Neutral;
}

